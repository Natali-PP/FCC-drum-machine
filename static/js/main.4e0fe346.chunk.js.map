{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["synths","id","url","kString","keyCode","DrumSounds","props","playSound","e","document","getElementById","play","innerText","display","useEffect","window","addEventListener","handler","removeEventListener","className","audioId","onClick","src","audioUrl","InnerContainer","innerContainer","map","item","index","array","key","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAGMA,G,UAAS,CAAC,CACdC,GAAG,aACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,aACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,aACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,aACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,UACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,UACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,UACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,UACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,IAER,CACAH,GAAG,aACHC,IAAI,6FACJC,QAAQ,IACRC,QAAQ,MAGJC,EAAa,SAACC,GAElB,SAASC,EAAUC,GACjBC,SAASC,eAAeJ,EAAMH,SAASQ,OACvCF,SAASC,eAAe,WAAWE,UAAUN,EAAMO,QAGrDC,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACLF,OAAOG,oBAAoB,UAAWD,OAG1C,IAAMA,EAAU,SAACT,GACZA,EAAEJ,UAAYE,EAAMF,SACrBG,KAGJ,OACE,yBAAKY,UAAU,WAAWlB,GAAIK,EAAMc,QAASC,QAASd,GACpD,2BAAID,EAAMH,SACV,2BAAOF,GAAIK,EAAMH,QAASmB,IAAKhB,EAAMiB,SAAWJ,UAAU,WAK1DK,EAAiB,WACrB,IAAIC,EAAiBzB,EAAO0B,KAAK,SAACC,EAAMC,EAAOC,GAC7C,OACE,kBAAC,EAAD,CACET,QAASS,EAAMD,GAAO3B,GACtBsB,SAAUM,EAAMD,GAAO1B,IACvBE,QAASyB,EAAMD,GAAOxB,QACtBD,QAAS0B,EAAMD,GAAOzB,QACtBU,QAASgB,EAAMD,GAAO3B,GACtB6B,IAAKF,OAIT,OACE,yBAAKT,UAAU,eACb,yBAAKA,UAAU,kBAAkBM,KAiBtBM,MAZlB,WACM,OACA,yBAAK9B,GAAG,eAAekB,UAAU,mBAC/B,wBAAIA,UAAU,SAAd,gBACA,yBAAKlB,GAAG,WAAR,uCAEA,kBAAC,EAAD,QClGW+B,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD4H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4e0fe346.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport './App.css';\n\nconst synths = [{\n  id:\"Roland B01\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20B%20Line%2001.mp3\",\n  kString:\"Q\",\n  keyCode:81\n},\n  {\n  id:\"Roland C01\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20C%20Line%2004.mp3\",\n  kString:\"W\",\n  keyCode:87\n},\n  {\n  id:\"Roland D11\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20D%20Line%2011.mp3\",\n  kString:\"E\",\n  keyCode:69\n},\n  {\n  id:\"Roland D13\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20D%20Line%2013.mp3\",\n  kString:\"A\",\n  keyCode:65\n},\n  {\n  id:\"Blip 01\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2001.mp3\",\n  kString:\"S\",\n  keyCode:83\n},\n  {\n  id:\"Blip 10\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2010.mp3\",\n  kString:\"D\",\n  keyCode:68\n},\n  {\n  id:\"Blip 17\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2017.mp3\",\n  kString:\"Z\",\n  keyCode:90\n},\n  {\n  id:\"Blip 29\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20E%20Blip%2029.mp3\",\n  kString:\"X\",\n  keyCode:88\n},\n  {\n  id:\"Roland F01\",\n  url:\"https://raw.githubusercontent.com/rapidsloth/synthesizer/master/Roland%20F%20Line%2001.mp3\",\n  kString:\"C\",\n  keyCode:67\n}]\n\nconst DrumSounds = (props) => {\n\n  function playSound(e){\n    document.getElementById(props.kString).play();\n    document.getElementById(\"display\").innerText=props.display;\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', handler)\n    return () => {\n      window.removeEventListener('keydown', handler)\n    }});\n\n  const handler = (e) =>{\n    if(e.keyCode === props.keyCode){\n      playSound();\n    }\n  }\n  return(\n    <div className=\"drum-pad\" id={props.audioId} onClick={playSound}>\n      <p>{props.kString}</p>\n      <audio id={props.kString} src={props.audioUrl}  className=\"clip\"></audio>\n    </div>\n  )\n}\n\nconst InnerContainer = () => {\n  let innerContainer = synths.map( (item, index, array) => {\n    return(\n      <DrumSounds \n        audioId={array[index].id}\n        audioUrl={array[index].url}\n        keyCode={array[index].keyCode}\n        kString={array[index].kString}\n        display={array[index].id}\n        key={index}\n      />\n    )});\n\n    return(\n      <div className=\"center-grid\">\n        <div className=\"grid-container\">{innerContainer}</div>\n      </div>\n    )\n}\n\n function App () {\n       return (\n       <div id=\"drum-machine\" className=\"inner-container\">\n         <h1 className=\"title\">Drum Machine</h1>\n         <div id=\"display\">Drum Machine in React ^16.8 w Hooks    \n         </div>\n         <InnerContainer />\n         \n       </div>\n    )}\n\n\n    export default App;\n\n\n/* const DrumPad = (props) => {\n\n  const playAudio = (e) =>{\n    document.getElementById(this.props.key).play();\n  };\n\n  useEffect( () => {\n    window.addEventListener('keydown', handler);\n    return () => {\n      window.removeEventListener('keydown', handler);\n    }\n  });\n\n  function handler(e){\n    if( e.keyCode === props.keyCode){\n      this.audio.play();\n      this.audio.currentTime = 0;\n      \n    }}\n\n    return (\n      <div id={props.audioId} className='drum-pad' onClick={() => this.audio.play() }>\n        <audio className='clip' id={props.key} src={props.url}></audio>\n      </div>\n    )\n\n  }\n\n\nconst DrumDisplay = () => {\n  let drumDisplay = synths.map( (item, index) => {\n    return (\n      <DrumPad \n        key={item.key}\n        keyCode={item.keyCode}\n        audioId={item.id}\n        audioUrl={item.url}\n       /> \n    )})\n    return(\n      <div>{drumDisplay}</div>\n    )\n}\n\nconst DrumMachine = () => {\n  const [idText, setIdText] = useState('Press or click a keyboard')\n  \n  return (\n      <div id=\"drum-machine\"  >\n          <div id=\"display\" >\n              <p>{idText}</p>\n          </div>\n          <div className=\"drum-machine\" >\n            <DrumDisplay />\n          </div>\n\n          \n      </div>\n  )\n}\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\" >\n      \n      <h1 className=\"title\">Drum Machine</h1>\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App; */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}